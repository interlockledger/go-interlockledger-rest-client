// BSD 3-Clause License
//
// Copyright (c) 2022, InterlockLedger
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package crypto

import (
	"crypto/ecdsa"
	"crypto/ed25519"
	"crypto/rsa"
	"math/big"
	srand "math/rand"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var (
	SAMPLE_ENC_IV = []byte{
		0x65, 0x8b, 0x3b, 0x5e, 0x2c, 0x55, 0x51, 0x14, 0x23, 0xfc, 0xce, 0xa9, 0x0, 0x7c, 0xe9, 0x9c, 0x37, 0xd5, 0xaa, 0x43, 0x9b, 0x99, 0x5b, 0xa0, 0x17, 0x23, 0x86, 0x3, 0xb6, 0x33, 0xa9, 0xcf, 0xdc, 0xdf, 0x87, 0x5e, 0x73, 0x33, 0x82, 0xcf, 0x6a, 0x1e, 0xb9, 0x6e, 0x1d, 0x78, 0x17, 0xbd, 0xc3, 0x38, 0x21, 0xa4, 0x2a, 0x91, 0x4b, 0x71, 0x46, 0xb8, 0x39, 0xfd, 0xfe, 0x72, 0xd, 0x3d, 0xef, 0xbf, 0xa6, 0x55, 0x9c, 0xd9, 0x30, 0x6e, 0xf7, 0x4a, 0xc3, 0x17, 0xd7, 0x63, 0x24, 0xcf, 0x79, 0xf5, 0xd0, 0xd2, 0x15, 0x3d, 0x40, 0x53, 0x94, 0xae, 0xc5, 0xc6, 0xfd, 0xe5, 0xd7, 0x62, 0x88, 0x9c, 0xe5, 0xf9, 0x35, 0x90, 0xde, 0x9f, 0x57, 0xab, 0x53, 0xec, 0xa7, 0x7d, 0x76, 0x9e, 0xc0, 0x4b, 0xb1, 0x76, 0x9c, 0x56, 0x82, 0xf8, 0xd, 0x7a, 0xdf, 0xf4, 0x99, 0x1e, 0xd5, 0xf1, 0x82, 0xc5, 0xeb, 0x81, 0x57, 0xe5, 0x36, 0x88, 0x2b, 0xbc, 0x7a, 0x4, 0xf8, 0xc9, 0x1a, 0x6e, 0x71, 0xff, 0x66, 0xf7, 0xb3, 0xf8, 0x58, 0x11, 0x95, 0x4d, 0xf1, 0x67, 0xd7, 0x20, 0x6b, 0xfd, 0x68, 0xe6, 0xc4, 0x1f, 0x35, 0xfa, 0xe6, 0x7b, 0x3e, 0x3c, 0xc, 0xb6, 0xe0, 0x2e, 0x40, 0xf7, 0x5a, 0x81, 0xb8, 0x69, 0x3c, 0xf5, 0x7e, 0x7f, 0x8b, 0xea, 0x50, 0xde, 0x7b, 0x2, 0xb6, 0xa, 0xb4, 0xb3, 0xfd, 0x5a, 0x4d, 0x5e, 0x14, 0xcd, 0x41, 0x1, 0xe3, 0x3a, 0xa2, 0x5a, 0xbd, 0xdd, 0xcc, 0xa6, 0xd0, 0x2e, 0x98, 0xb8, 0x2f, 0x73, 0x88, 0xa3, 0x47, 0xdd, 0x51, 0x62, 0x68, 0xac, 0x53, 0x52, 0x6e, 0x90, 0xe5, 0x5f, 0x9c, 0xe5, 0x26, 0xd5, 0xc, 0x16, 0x41, 0x2c, 0xf1, 0xbf, 0xf9, 0x32, 0x82, 0xe3, 0x3a, 0xf1, 0x32, 0x5e, 0x1f, 0x15, 0x70, 0x82, 0x23, 0x81, 0x76, 0x3d}
	SAMPLE_ENC_KEY = []byte{
		0x76, 0x7f, 0x83, 0x0, 0x1f, 0xb2, 0xe2, 0x6f, 0x6b, 0x31, 0x73, 0x8f, 0x17, 0xbb, 0x18, 0x4e, 0x9a, 0x39, 0xb8, 0x0, 0xe, 0xb3, 0xc1, 0x5b, 0x7d, 0x3a, 0x4e, 0xbf, 0x32, 0xda, 0xd8, 0xf8, 0xe4, 0x27, 0xe4, 0x97, 0x9a, 0xa0, 0xe9, 0xdc, 0x2e, 0x43, 0x75, 0x6a, 0x4c, 0xd2, 0xc5, 0xdb, 0x39, 0x6f, 0xd0, 0xa, 0xbf, 0xc8, 0x63, 0xab, 0x4f, 0xf, 0xaa, 0xca, 0x82, 0xf5, 0x2, 0xa8, 0xbb, 0xc8, 0x26, 0xc4, 0x4f, 0xe5, 0x0, 0x3b, 0x8f, 0x89, 0xea, 0xe, 0x90, 0xad, 0x48, 0x5d, 0x76, 0x82, 0x96, 0x48, 0x28, 0xcc, 0xf3, 0xfd, 0x2f, 0xf6, 0xb3, 0xb7, 0x84, 0x72, 0x6e, 0x25, 0x86, 0xd4, 0xb5, 0x7d, 0x76, 0x91, 0xe3, 0x42, 0xee, 0xde, 0x1, 0x6d, 0xad, 0x40, 0xa, 0xc5, 0x49, 0xb3, 0xc7, 0xe, 0xd1, 0x2b, 0x78, 0x59, 0x54, 0xda, 0x39, 0x85, 0xdd, 0x9, 0x95, 0xec, 0x89, 0xd0, 0xd2, 0x2, 0xc8, 0x59, 0x7e, 0x72, 0xac, 0xab, 0x36, 0x41, 0x8f, 0x38, 0x29, 0xfb, 0x7a, 0xf2, 0xb8, 0x34, 0x70, 0xbe, 0xb0, 0x37, 0x5e, 0x39, 0xdc, 0xda, 0x26, 0x8a, 0xe2, 0x58, 0x84, 0x4, 0xb5, 0xaf, 0x9b, 0x3c, 0x16, 0x86, 0xa0, 0x37, 0x3b, 0xce, 0x57, 0x47, 0xe1, 0xd1, 0xa3, 0x57, 0xa, 0xba, 0x46, 0xbc, 0xd8, 0xfd, 0xb8, 0x74, 0xaf, 0xd2, 0x8c, 0x42, 0x40, 0xa6, 0xc1, 0xcc, 0x97, 0xd5, 0xc4, 0xd9, 0xe0, 0x95, 0x9b, 0x83, 0xe, 0x65, 0x4c, 0x46, 0x44, 0x2e, 0x46, 0x5e, 0xcf, 0x5e, 0xb3, 0x33, 0x9d, 0xf7, 0x37, 0x8c, 0xe3, 0x93, 0xcb, 0x83, 0x32, 0x6, 0x7, 0x76, 0xdb, 0x6, 0x4e, 0x7e, 0x37, 0xc3, 0x26, 0x9e, 0xa5, 0xdd, 0x75, 0x7b, 0x9b, 0xdf, 0xa1, 0x88, 0x1c, 0x95, 0xc3, 0xdb, 0x49, 0xb, 0x85, 0x4b, 0x14, 0x75, 0x7a, 0x9b, 0xe2, 0xc1}
	SAMPLE_IV = []byte{
		0xd6, 0xcc, 0x21, 0xac, 0xd4, 0xce, 0xd8, 0x1a, 0x5f, 0x87, 0xe9, 0x7c, 0x6, 0x8f, 0x79, 0x37}
	SAMPLE_KEY = []byte{
		0xf, 0xdd, 0x8b, 0xbf, 0x55, 0x6, 0x77, 0xe0, 0x7d, 0x9a, 0x42, 0xa, 0x9f, 0xba, 0x78, 0xac, 0x38, 0xf2, 0x37, 0x79, 0xd0, 0x88, 0x91, 0x56, 0x2d, 0x90, 0x32, 0xd0, 0x18, 0x34, 0x85, 0x64}
	SAMPLE_ENC = []byte{
		0xf6, 0x31, 0xe5, 0xca, 0x1d, 0x85, 0x55, 0x4a, 0xaa, 0x12, 0x3b, 0xb, 0x1, 0x30, 0x7f, 0x91}
	SAMPLE_PADDED = []byte{
		0x11, 0x9, 0x7b, 0x22, 0x61, 0x22, 0x3a, 0x22, 0x62, 0x22, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x0}
	SAMPLE = []byte{
		0x11, 0x9, 0x7b, 0x22, 0x61, 0x22, 0x3a, 0x22, 0x62, 0x22, 0x7d}
	SAMPLE_JSON = "{\"a\":\"b\"}"
)

func TestCastRSAPrivateKey(t *testing.T) {
	rsaPriv := &rsa.PrivateKey{}

	p, err := castRSAPrivateKey(rsaPriv)
	assert.Nil(t, err)
	assert.Same(t, rsaPriv, p)

	ed25519Priv := &ed25519.PrivateKey{}
	p, err = castRSAPrivateKey(ed25519Priv)
	assert.ErrorIs(t, err, ErrInvalidPrivateKey)
	assert.Nil(t, p)
}

func TestCastRSAPublicKey(t *testing.T) {
	rsaPub := &rsa.PublicKey{}

	p, err := castRSAPublicKey(rsaPub)
	assert.Nil(t, err)
	assert.Same(t, rsaPub, p)

	ed25519Priv := &ed25519.PublicKey{}
	p, err = castRSAPublicKey(ed25519Priv)
	assert.ErrorIs(t, err, ErrInvalidPublicKey)
	assert.Nil(t, p)
}

func TestDecryptRSAWithPrivate(t *testing.T) {
	certFile := getSampleFile("cert.pem")
	keyFile := getSampleFile("key.pem")

	pair, err := LoadCertificateWithKey(certFile, keyFile)
	require.Nil(t, err)
	require.NotNil(t, pair)

	bin, err := DecryptRSAWithPrivate(pair.PrivateKey, SAMPLE_ENC_IV)
	require.Nil(t, err)
	require.Equal(t, SAMPLE_IV, bin)

	badKey := &ecdsa.PrivateKey{}
	bin, err = DecryptRSAWithPrivate(badKey, SAMPLE_ENC_IV)
	require.ErrorIs(t, err, ErrInvalidPrivateKey)
	require.Nil(t, bin)
}

func TestRemoveISO10126Padding(t *testing.T) {

	block := make([]byte, 16)
	for paddingSize := 1; paddingSize <= 16; paddingSize++ {
		_, err := srand.Read(block)
		require.Nil(t, err)
		block[15] = byte(paddingSize)
		b, err := RemoveISO10126Padding(16, block)
		assert.Nil(t, err)
		assert.Equal(t, 16-paddingSize, len(b))
		if paddingSize != 16 {
			assert.Same(t, &b[0], &block[0])
		}
	}

	block[15] = 0
	b, err := RemoveISO10126Padding(16, block)
	assert.ErrorIs(t, err, ErrInvalidPadding)
	assert.Nil(t, b)

	block[15] = 17
	b, err = RemoveISO10126Padding(16, block)
	assert.ErrorIs(t, err, ErrInvalidPadding)
	assert.Nil(t, b)
}

func TestRemoveZeroPadding(t *testing.T) {

	for paddingSize := 1; paddingSize <= 16; paddingSize++ {
		block := make([]byte, 16)
		_, err := srand.Read(block[:16-paddingSize])
		require.Nil(t, err)
		b := RemoveZeroPadding(block)
		assert.Nil(t, err)
		assert.Equal(t, 16-paddingSize, len(b))
		if paddingSize != 16 {
			assert.Same(t, &b[0], &block[0])
		}
	}
}

func TestDecipherAESCBC(t *testing.T) {

	dec, n, err := DecipherAESCBC(SAMPLE_KEY, SAMPLE_IV, SAMPLE_ENC)
	require.Nil(t, err)
	require.Equal(t, 16, n)
	require.Equal(t, SAMPLE_PADDED, dec)

	dec, n, err = DecipherAESCBC(SAMPLE_KEY[1:], SAMPLE_IV, SAMPLE_ENC)
	require.Error(t, err)
	require.Equal(t, 0, n)
	require.Nil(t, dec)

	dec, n, err = DecipherAESCBC(SAMPLE_KEY, SAMPLE_IV[1:], SAMPLE_ENC)
	require.ErrorIs(t, err, ErrInvalidBlockCipherIv)
	require.Equal(t, 0, n)
	require.Nil(t, dec)

	dec, n, err = DecipherAESCBC(SAMPLE_KEY, SAMPLE_IV, SAMPLE_ENC[1:])
	require.ErrorIs(t, err, ErrInvalidEncryptedMessage)
	require.Equal(t, 0, n)
	require.Nil(t, dec)
}

func TestDecipherJSON(t *testing.T) {

	dec, err := DecipherJSON(SAMPLE_KEY, SAMPLE_IV, SAMPLE_ENC)
	require.Nil(t, err)
	require.Equal(t, SAMPLE_JSON, dec)

	dec, err = DecipherJSON(SAMPLE_KEY, SAMPLE_IV, SAMPLE_PADDED)
	require.Error(t, err)
	require.Equal(t, "", dec)

	dec, err = DecipherJSON(SAMPLE_KEY, SAMPLE_IV, SAMPLE_ENC[:1])
	require.Error(t, err)
	require.Equal(t, "", dec)
}

func TestConvertRSAPublicKey(t *testing.T) {
	n := big.NewInt(0)
	n.SetString("00b39ba38fdf5bdb081c40c9e484c5b71c7ce4a082c1a80b487013622aaf25b3b63af9a8ebb3bcc0b01eb89d521f9e443e901e38ef3855a40d716b57327f0d5191de086a884df8476b7f53ea774561b60d05586ae37c25162176733d8132adb4dd9523a0d60585227f056fbf71558514efe4dbaf7c09540d5b98729c2190cde2ab23b42d670dffe136e28261dfa65fc55505dc47f5ab1b092bf13f722bde95501aec4ac20c20dbc8c28d4e52a5a210d6217969e1f235d97f359d7f0aef23bc3258c048e17307aa1ad2e8fa1a704379913e23279ac45f7975b0ea1ed599302ad14387c97a9d388ee2c875b1da352989ae62f781caceb748f4eded46dc7974601d5d74545416b92d2e52aea05d70cd5bf5ab2f43de26a6d2b62344cbd67b27e465821138f01247d4057a8341827361e07a523ead7bff28b8ed6e9f723f5d9722981cb074a6f8ff50743fcbdc2d314521fb243a80b90372407bdd223d183e558367cbc536cce160128b3a8f533d540990bf107b7613809740fd0bc9d027e165330439", 16)
	pk := &rsa.PublicKey{E: 65537, N: n}

	bin, err := convertRSAPublicKey(pk)
	assert.Nil(t, err)
	assert.NotNil(t, bin)
	assert.Equal(t, []byte{
		0x28, 0xf8, 0x90, 0x10, 0xf8, 0x88, 0xb3, 0x9b,
		0xa3, 0x8f, 0xdf, 0x5b, 0xdb, 0x8, 0x1c, 0x40,
		0xc9, 0xe4, 0x84, 0xc5, 0xb7, 0x1c, 0x7c, 0xe4,
		0xa0, 0x82, 0xc1, 0xa8, 0xb, 0x48, 0x70, 0x13,
		0x62, 0x2a, 0xaf, 0x25, 0xb3, 0xb6, 0x3a, 0xf9,
		0xa8, 0xeb, 0xb3, 0xbc, 0xc0, 0xb0, 0x1e, 0xb8,
		0x9d, 0x52, 0x1f, 0x9e, 0x44, 0x3e, 0x90, 0x1e,
		0x38, 0xef, 0x38, 0x55, 0xa4, 0xd, 0x71, 0x6b,
		0x57, 0x32, 0x7f, 0xd, 0x51, 0x91, 0xde, 0x8,
		0x6a, 0x88, 0x4d, 0xf8, 0x47, 0x6b, 0x7f, 0x53,
		0xea, 0x77, 0x45, 0x61, 0xb6, 0xd, 0x5, 0x58,
		0x6a, 0xe3, 0x7c, 0x25, 0x16, 0x21, 0x76, 0x73,
		0x3d, 0x81, 0x32, 0xad, 0xb4, 0xdd, 0x95, 0x23,
		0xa0, 0xd6, 0x5, 0x85, 0x22, 0x7f, 0x5, 0x6f,
		0xbf, 0x71, 0x55, 0x85, 0x14, 0xef, 0xe4, 0xdb,
		0xaf, 0x7c, 0x9, 0x54, 0xd, 0x5b, 0x98, 0x72,
		0x9c, 0x21, 0x90, 0xcd, 0xe2, 0xab, 0x23, 0xb4,
		0x2d, 0x67, 0xd, 0xff, 0xe1, 0x36, 0xe2, 0x82,
		0x61, 0xdf, 0xa6, 0x5f, 0xc5, 0x55, 0x5, 0xdc,
		0x47, 0xf5, 0xab, 0x1b, 0x9, 0x2b, 0xf1, 0x3f,
		0x72, 0x2b, 0xde, 0x95, 0x50, 0x1a, 0xec, 0x4a,
		0xc2, 0xc, 0x20, 0xdb, 0xc8, 0xc2, 0x8d, 0x4e,
		0x52, 0xa5, 0xa2, 0x10, 0xd6, 0x21, 0x79, 0x69,
		0xe1, 0xf2, 0x35, 0xd9, 0x7f, 0x35, 0x9d, 0x7f,
		0xa, 0xef, 0x23, 0xbc, 0x32, 0x58, 0xc0, 0x48,
		0xe1, 0x73, 0x7, 0xaa, 0x1a, 0xd2, 0xe8, 0xfa,
		0x1a, 0x70, 0x43, 0x79, 0x91, 0x3e, 0x23, 0x27,
		0x9a, 0xc4, 0x5f, 0x79, 0x75, 0xb0, 0xea, 0x1e,
		0xd5, 0x99, 0x30, 0x2a, 0xd1, 0x43, 0x87, 0xc9,
		0x7a, 0x9d, 0x38, 0x8e, 0xe2, 0xc8, 0x75, 0xb1,
		0xda, 0x35, 0x29, 0x89, 0xae, 0x62, 0xf7, 0x81,
		0xca, 0xce, 0xb7, 0x48, 0xf4, 0xed, 0xed, 0x46,
		0xdc, 0x79, 0x74, 0x60, 0x1d, 0x5d, 0x74, 0x54,
		0x54, 0x16, 0xb9, 0x2d, 0x2e, 0x52, 0xae, 0xa0,
		0x5d, 0x70, 0xcd, 0x5b, 0xf5, 0xab, 0x2f, 0x43,
		0xde, 0x26, 0xa6, 0xd2, 0xb6, 0x23, 0x44, 0xcb,
		0xd6, 0x7b, 0x27, 0xe4, 0x65, 0x82, 0x11, 0x38,
		0xf0, 0x12, 0x47, 0xd4, 0x5, 0x7a, 0x83, 0x41,
		0x82, 0x73, 0x61, 0xe0, 0x7a, 0x52, 0x3e, 0xad,
		0x7b, 0xff, 0x28, 0xb8, 0xed, 0x6e, 0x9f, 0x72,
		0x3f, 0x5d, 0x97, 0x22, 0x98, 0x1c, 0xb0, 0x74,
		0xa6, 0xf8, 0xff, 0x50, 0x74, 0x3f, 0xcb, 0xdc,
		0x2d, 0x31, 0x45, 0x21, 0xfb, 0x24, 0x3a, 0x80,
		0xb9, 0x3, 0x72, 0x40, 0x7b, 0xdd, 0x22, 0x3d,
		0x18, 0x3e, 0x55, 0x83, 0x67, 0xcb, 0xc5, 0x36,
		0xcc, 0xe1, 0x60, 0x12, 0x8b, 0x3a, 0x8f, 0x53,
		0x3d, 0x54, 0x9, 0x90, 0xbf, 0x10, 0x7b, 0x76,
		0x13, 0x80, 0x97, 0x40, 0xfd, 0xb, 0xc9, 0xd0,
		0x27, 0xe1, 0x65, 0x33, 0x4, 0x39, 0x10, 0x3,
		0x1, 0x0, 0x1},
		bin)
}

func TestCreatePublicKeyHashBin(t *testing.T) {
	n := big.NewInt(0)
	n.SetString("00b39ba38fdf5bdb081c40c9e484c5b71c7ce4a082c1a80b487013622aaf25b3b63af9a8ebb3bcc0b01eb89d521f9e443e901e38ef3855a40d716b57327f0d5191de086a884df8476b7f53ea774561b60d05586ae37c25162176733d8132adb4dd9523a0d60585227f056fbf71558514efe4dbaf7c09540d5b98729c2190cde2ab23b42d670dffe136e28261dfa65fc55505dc47f5ab1b092bf13f722bde95501aec4ac20c20dbc8c28d4e52a5a210d6217969e1f235d97f359d7f0aef23bc3258c048e17307aa1ad2e8fa1a704379913e23279ac45f7975b0ea1ed599302ad14387c97a9d388ee2c875b1da352989ae62f781caceb748f4eded46dc7974601d5d74545416b92d2e52aea05d70cd5bf5ab2f43de26a6d2b62344cbd67b27e465821138f01247d4057a8341827361e07a523ead7bff28b8ed6e9f723f5d9722981cb074a6f8ff50743fcbdc2d314521fb243a80b90372407bdd223d183e558367cbc536cce160128b3a8f533d540990bf107b7613809740fd0bc9d027e165330439", 16)
	pk := &rsa.PublicKey{E: 65537, N: n}

	bin, err := convertRSAPublicKey(pk)
	assert.Nil(t, err)
	assert.NotNil(t, bin)

	s, err := CreatePublicKeyHashBin(bin)
	assert.Nil(t, err)
	assert.Equal(t, "QVxUC2T2B_YI4wc4xylO0prlMEhgx1vOqc8NqTqn2lE#SHA256", s)
}

func TestCreatePublicKeyHash(t *testing.T) {
	n := big.NewInt(0)
	n.SetString("00b39ba38fdf5bdb081c40c9e484c5b71c7ce4a082c1a80b487013622aaf25b3b63af9a8ebb3bcc0b01eb89d521f9e443e901e38ef3855a40d716b57327f0d5191de086a884df8476b7f53ea774561b60d05586ae37c25162176733d8132adb4dd9523a0d60585227f056fbf71558514efe4dbaf7c09540d5b98729c2190cde2ab23b42d670dffe136e28261dfa65fc55505dc47f5ab1b092bf13f722bde95501aec4ac20c20dbc8c28d4e52a5a210d6217969e1f235d97f359d7f0aef23bc3258c048e17307aa1ad2e8fa1a704379913e23279ac45f7975b0ea1ed599302ad14387c97a9d388ee2c875b1da352989ae62f781caceb748f4eded46dc7974601d5d74545416b92d2e52aea05d70cd5bf5ab2f43de26a6d2b62344cbd67b27e465821138f01247d4057a8341827361e07a523ead7bff28b8ed6e9f723f5d9722981cb074a6f8ff50743fcbdc2d314521fb243a80b90372407bdd223d183e558367cbc536cce160128b3a8f533d540990bf107b7613809740fd0bc9d027e165330439", 16)
	pk := &rsa.PublicKey{E: 65537, N: n}

	s, err := CreatePublicKeyHash(pk)
	assert.Nil(t, err)
	assert.Equal(t, "QVxUC2T2B_YI4wc4xylO0prlMEhgx1vOqc8NqTqn2lE#SHA256", s)
}
